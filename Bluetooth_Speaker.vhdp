Main
(

    Next_Btn_n  : IN     STD_LOGIC;  --Next Song
    Prev_Btn_n  : IN     STD_LOGIC;  --Last Song
    Pause_Btn_n : IN     STD_LOGIC;  --Play/Pause
    Next_LED    : OUT    STD_LOGIC;  --Right LED
    Prev_LED    : OUT    STD_LOGIC;  --Left LED
    Pause_LED   : OUT    STD_LOGIC;  --Middle LED
    
    Audio_MCLK  : OUT    STD_LOGIC;  --Master Clock
    Audio_IRQ   : IN     STD_LOGIC;  --Interrupt
    Audio_SDA   : INOUT  STD_LOGIC;  --I2C Data
    Audio_SCL   : INOUT  STD_LOGIC;  --I2C Clock
    Audio_BCLK  : IN     STD_LOGIC;  --I2S Bit Clock
    Audio_LRCLK : IN     STD_LOGIC;  --I2S Left/Right Clock
    Audio_SDOUT : IN     STD_LOGIC;  --I2S ADC Data
    Audio_SDIN  : OUT    STD_LOGIC;  --I2S DAC Data
    
    Bluetooth_LRCLK  : IN  STD_LOGIC := '0';
    Bluetooth_BCLK   : IN  STD_LOGIC := '0';
    Bluetooth_Data   : IN  STD_LOGIC := '0';
    Bluetooth_Next   : Out STD_LOGIC := '0';
    Bluetooth_Prev   : Out STD_LOGIC := '0';
    Bluetooth_Pause  : Out STD_LOGIC := '0';

    LED_Strip_Out    : BUFFER STD_LOGIC;
    
)
{

--Buttons------------------------------------------------------------------------------------------

    SIGNAL LED_Strip_On : STD_LOGIC := '0';
    SIGNAL Color_Mode   : NATURAL range 0 to 7 := 2;
    Process ()
    {
        Thread
        {
            While((Next_Btn AND Prev_Btn) = '1')  { Wait(100ms); } --Wait until Button released
            While((Next_Btn OR  Prev_Btn) = '0')  { Wait(100ms); } --Wait for Button pressed
            If(Color_Mode < 7)
            {
                Color_Mode <= Color_Mode + 1;
            }
            Else
            {
                Color_Mode <= 0;
            }
            Wait(2s);
            If((Next_Btn AND Prev_Btn) = '1')
            {
                LED_Strip_On <= not LED_Strip_On;
            }
        }
    }
    
    SIGNAL Next_Btn  : STD_LOGIC;  --Next Song
    SIGNAL Prev_Btn  : STD_LOGIC;  --Last Song
    SIGNAL Pause_Btn : STD_LOGIC;  --Play/Pause
    
    Next_Btn <= NOT Next_Btn_n;
    Prev_Btn <= NOT Prev_Btn_n;
    Pause_Btn <= NOT Pause_Btn_n;
    
    Process ()
    {
        Thread
        {
            While((Next_Btn OR Prev_Btn OR Pause_Btn) = '1')  { Wait(100ms); } --Wait until Button released
            While((Next_Btn AND Prev_Btn AND Pause_Btn) = '0'){ Wait(100ms); } --Wait for Button pressed
            VARIABLE btn_reg : STD_LOGIC_VECTOR(2 downto 0);
            btn_reg(0) := Next_Btn;  --Save values in case the button isn't pressed any more
            btn_reg(1) := Prev_Btn;
            btn_reg(2) := Pause_Btn;
            --Simulate double click for bluetooth module (one click is vol up/down). Single click for Pause
            For(VARIABLE ctr : NATURAL range 0 to 2 := 0; ctr < 2 AND btn_reg(2) = '0'; ctr := ctr + 1)
            {
                Bluetooth_Next  <= btn_reg(0);
                Bluetooth_Prev  <= btn_reg(1);
                Bluetooth_Pause <= btn_reg(2);
                Wait(200ms);
                Bluetooth_Next  <= '0';
                Bluetooth_Prev  <= '0';
                Bluetooth_Pause <= '0';
                Wait(200ms);
            }
        }
    }
    
--LEDs---------------------------------------------------------------------------------------------
    
    Process ()
    {
        VARIABLE Inc_Brightness : STD_LOGIC_VECTOR(2 downto 0) := "000";
        VARIABLE Trig           : STD_LOGIC_VECTOR(2 downto 0) := "000";
        Thread  --Wait for left button pressed
        {
            While(Prev_Btn = '1'){ Wait(100ms); } --Wait until Button released
            While(Prev_Btn = '0'){ Wait(100ms); } --Wait for Button pressed
            Inc_Brightness(0) := '1';
            Trig(0) := '1';
            ctr0 := 0;
        }
        Thread  --Wait for middle button pressed
        {
            While(Pause_Btn = '1'){ Wait(100ms); } --Wait until Button released
            While(Pause_Btn = '0'){ Wait(100ms); } --Wait for Button pressed
            Inc_Brightness(1) := '1';
            Trig(1) := '1';
            ctr1 := 0;
        }
        Thread  --Wait for right button pressed
        {
            While(Next_Btn = '1'){ Wait(100ms); } --Wait until Button released
            While(Next_Btn = '0'){ Wait(100ms); } --Wait for Button pressed
            Inc_Brightness(2) := '1';
            Trig(2) := '1';
            ctr2 := 0;
        }
        Thread  --Light Effect for left button
        {
            While(Inc_Brightness(0) = '0')
            {
                If(UNSIGNED(LED_Brightness(0)) > 0)
                {
                    LED_Brightness(0) <= STD_LOGIC_VECTOR(UNSIGNED(LED_Brightness(0)) - 1);
                    Wait(400us);
                }
            }
            For(VARIABLE ctr0 : NATURAL range 0 to 256 := 0; ctr0 < 256; ctr0 := ctr0 + 1)
            {
                If(UNSIGNED(LED_Brightness(0)) < 255)
                {
                    LED_Brightness(0) <= STD_LOGIC_VECTOR(UNSIGNED(LED_Brightness(0)) + 1);
                }
                If(ctr0 = 127 AND Trig(0) = '1')
                {
                    Inc_Brightness(1) := '1';
                }
                If(ctr0 = 255 AND Trig(0) = '1')
                {
                    Inc_Brightness(2) := '1';
                }
                Wait(600us);
            }
            Inc_Brightness(0) := '0';
            Trig(0) := '0';
        }
        Thread  --Light Effect for middle button
        {
            While(Inc_Brightness(1) = '0')
            {
                If(UNSIGNED(LED_Brightness(1)) > 0)
                {
                    LED_Brightness(1) <= STD_LOGIC_VECTOR(UNSIGNED(LED_Brightness(1)) - 1);
                    Wait(400us);
                }
            }
            For(VARIABLE ctr1 : NATURAL range 0 to 256 := 0; ctr1 < 256; ctr1 := ctr1 + 1)
            {
                If(UNSIGNED(LED_Brightness(1)) < 255)
                {
                    LED_Brightness(1) <= STD_LOGIC_VECTOR(UNSIGNED(LED_Brightness(1)) + 1);
                }
                If(ctr1 = 127 AND Trig(1) = '1')
                {
                    Inc_Brightness(0) := '1';
                    Inc_Brightness(2) := '1';
                }
                Wait(600us);
            }
            Inc_Brightness(1) := '0';
            Trig(1) := '0';
        }
        Thread  --Light Effect for right button
        {
            While(Inc_Brightness(2) = '0')
            {
                If(UNSIGNED(LED_Brightness(2)) > 0)
                {
                    LED_Brightness(2) <= STD_LOGIC_VECTOR(UNSIGNED(LED_Brightness(2)) - 1);
                    Wait(400us);
                }
            }
            For(VARIABLE ctr2 : NATURAL range 0 to 256 := 0; ctr2 < 256; ctr2 := ctr2 + 1)
            {
                If(UNSIGNED(LED_Brightness(2)) < 255)
                {
                    LED_Brightness(2) <= STD_LOGIC_VECTOR(UNSIGNED(LED_Brightness(2)) + 1);
                }
                If(ctr2 = 127 AND Trig(2) = '1')
                {
                    Inc_Brightness(1) := '1';
                }
                If(ctr2 = 255 AND Trig(2) = '1')
                {
                    Inc_Brightness(0) := '1';
                }
                Wait(600us);
            }
            Inc_Brightness(2) := '0';
            Trig(2) := '0';
        }
    }
    
    --When button pressed -> LED lights up and wave goes trough leds next to it
    SIGNAL LED_reg : STD_LOGIC_VECTOR(2 downto 0);
    Prev_LED  <= LED_reg(0);
    Pause_LED <= LED_reg(1);
    Next_LED  <= LED_reg(2);
    
    TYPE LED_Brightness_type IS ARRAY (0 to 2) OF STD_LOGIC_VECTOR(7 downto 0);
    SIGNAL LED_Brightness : LED_Brightness_type;
    
    Generate (for i in 0 to 2)
    {
        NewComponent PWM_Generator
        (
            Duty            => LED_Brightness(i),
            PWM_Out(0)      => LED_reg(i),
        );
    }
    
--LED Strip----------------------------------------------------------------------------------------
    
    CONSTANT LEDs : NATURAL := 51;
    
    CONSTANT Colors : NATURAL := 6;
    TYPE Colors_type IS ARRAY (0 to Colors-1) OF STD_LOGIC_VECTOR(23 downto 0);
    CONSTANT Colors_Arr : Colors_type :=
    (
        x"FF0000",
        x"7F7F00",
        x"00FF00",
        x"007F7F",
        x"0000FF",
        x"7F007F"
    );
    
    --TODO: Find current average and maximum in last second
    Process ()
    {
        Thread
        {
            If(Color_Mode = 0)
            {
                For(VARIABLE color : NATURAL range 0 to Colors := 0; color < Colors; color := color + 1)
                {
                    Wait(1s);
                }
            }
            Else
            {
                color := Color_Mode-1;
            }
        }
        
        VARIABLE vol : NATURAL range 0 to 31;
        --vol := highest_bit(Audio_Vol);
        vol := TO_INTEGER(Audio_Vol(15 downto 10))*24/64;
        if(vol > 24) { vol := 24; }
        
        If(LED_Strip_Address >= 25-vol AND LED_Strip_Address <= 26+vol AND LED_Strip_On = '1')
        {
            If(color < 6)
            {
                LED_Strip_Pixel <= Colors_Arr(color);
            }
            Else
            {
                LED_Strip_Pixel <= (others => '1');
            }
        }
        Else
        {
            LED_Strip_Pixel <= x"000000";
        }
    }
    
    SIGNAL LED_Strip_Update           : STD_LOGIC;
    SIGNAL LED_Strip_Pixel_CLK        : STD_LOGIC;
    SIGNAL LED_Strip_Address          : NATURAL          range 0 to LEDs-1;
    SIGNAL LED_Strip_Pixel            : STD_LOGIC_VECTOR (23 downto 0) := x"FF00FF";
    NewComponent WS2812_Interface
    (
        CLK_Frequency => 12000000,
        LEDs          => LEDs,

        Update        => LED_Strip_Update,
        Data_Out      => LED_Strip_Out,
        Pixel_CLK     => LED_Strip_Pixel_CLK,
        Address       => LED_Strip_Address,
        Pixel         => LED_Strip_Pixel,
    );
    
--Channel Watcher----------------------------------------------------------------------------------
    
    SIGNAL Bluetooth_Out : STD_LOGIC := '1';
    Process ()
    {
        Thread
        {
            VARIABLE analog_sum    : SIGNED (16 downto 0);
            SIGNAL   analog_dif    : UNSIGNED (16 downto 0);
            VARIABLE analog_min    : SIGNED (16 downto 0);
            VARIABLE analog_max    : SIGNED (16 downto 0);
            VARIABLE bluetooth_sum : SIGNED (16 downto 0);
            SIGNAL   bluetooth_dif : UNSIGNED (16 downto 0);
            VARIABLE bluetooth_min : SIGNED (16 downto 0);
            VARIABLE bluetooth_max : SIGNED (16 downto 0);
            SIGNAL Audio_Vol       : UNSIGNED (16 downto 0);
            --Check 1000 samples and calculate the amplitude -> The louder signal is played
            For(VARIABLE ctr : NATURAL range 0 to 50 := 0; ctr < 50; ctr := ctr + 1)
            {
                bluetooth_sum := resize(SIGNED(Bluetooth_Data_L), 17) + resize(SIGNED(Bluetooth_Data_R), 17);
                If(ctr = 0)
                {
                    bluetooth_min := bluetooth_sum;
                    bluetooth_max := bluetooth_sum;
                }
                Elsif(bluetooth_sum < bluetooth_min)
                {
                    bluetooth_min := bluetooth_sum;
                }
                Elsif(bluetooth_sum > bluetooth_max)
                {
                    bluetooth_max := bluetooth_sum;
                }
                
                analog_sum := resize(Audio_Codec_Component_ADC_L, 17) + resize(Audio_Codec_Component_ADC_R, 17);
                If(ctr = 0)
                {
                    analog_min := analog_sum;
                    analog_max := analog_sum;
                }
                Elsif(analog_sum < analog_min)
                {
                    analog_min := analog_sum;
                }
                Elsif(analog_sum > analog_max)
                {
                    analog_max := analog_sum;
                }
                
                Wait(30us);
            }
            
            analog_dif    <= unsigned(abs(resize(analog_max, 18) - resize(analog_min, 18)))(16 downto 0);
            bluetooth_dif <= unsigned(abs(resize(bluetooth_max, 18) - resize(bluetooth_min, 18)))(16 downto 0);
            If(analog_dif > bluetooth_dif+500)
            {
                Bluetooth_Out <= '0';
                Audio_Vol <= analog_dif;
            }
            Else
            {
                Bluetooth_Out <= '1';
                Audio_Vol <= bluetooth_dif;
            }
            
            Wait(2);
            LED_Strip_Update <= '1';
            Wait(1);
            LED_Strip_Update <= '0';
        }
    }
    
--Volume-------------------------------------------------------------------------------------------
    
    SIGNAL Volume        : NATURAL range 0 to 15   := 0;
    Volume <= TO_INTEGER(TO_UNSIGNED(Volume_Raw, 12)(11 downto 8));
    SIGNAL Volume_Raw    : NATURAL range 0 to 4095 := 0;
    NewComponent ADC_MAX10_Single
    (
        Channel => 0,
        Data    => Volume_Raw,
    );
    
--Mixer--------------------------------------------------------------------------------------------
    
    Process ()
    {
        VARIABLE Signal_Out_L : SIGNED  (15 downto 0);
        VARIABLE Signal_Out_R : SIGNED  (15 downto 0);
        
        Thread
        {
            SIGNAL Volume_Shifts : NATURAL range 0 to 7;
            Volume_Shifts <= Volume/2;
            While(true)
            {
                If(Volume > (Volume_Shifts*2+1) OR Volume < (Volume_Shifts*2-1))
                {
                    Volume_Shifts <= Volume/2;
                }
                Wait(100ms);
            }
        }
        
        Thread
        {
            VARIABLE Analog_On    : STD_LOGIC := '0';
            If(Analog_On = '0' and analog_dif > 600)
            {
                Analog_On := '1';
            }
            Elsif(Analog_On = '1' and analog_dif < 300)
            {
                Analog_On := '0';
            }
        }
        
        Thread
        {
            VARIABLE Bluetooth_On : STD_LOGIC := '0';
            If(Bluetooth_On = '0' and bluetooth_dif > 600)
            {
                Bluetooth_On := '1';
            }
            Elsif(Bluetooth_On = '1' and bluetooth_dif < 300)
            {
                Bluetooth_On := '0';
            }
        }

        --If(ISSP_source(0) = '1')
        If(Bluetooth_Out = '0')
        {
            If(Analog_On = '1')
            {
                Signal_Out_L := Audio_Codec_Component_ADC_L;
                Signal_Out_R := Audio_Codec_Component_ADC_R;
            }
        }
        Else
        {
            If(Bluetooth_On = '1')
            {
                Signal_Out_L := SIGNED(Bluetooth_Data_L);
                Signal_Out_R := SIGNED(Bluetooth_Data_R);
            }
        }

        Audio_Codec_Component_DAC_L <= shift_right(Signal_Out_L, (7-Volume_Shifts));
        Audio_Codec_Component_DAC_R <= shift_right(Signal_Out_R, (7-Volume_Shifts));
        
        If(ISSP_source(1) = '1')
        {
            ISSP_probe <= STD_LOGIC_VECTOR(TO_UNSIGNED(Volume_Shifts, ISSP_probe'LENGTH));
        }
        Elsif(ISSP_source(2) = '1')
        {
            ISSP_probe <= STD_LOGIC_VECTOR(resize(Audio_Codec_Component_ADC_L,32));
        }
        Elsif(ISSP_source(3) = '1')
        {
            ISSP_probe <= STD_LOGIC_VECTOR(resize(SIGNED(Bluetooth_Data_L),32));
        }
        Elsif(ISSP_source(4) = '1')
        {
            ISSP_probe(15 downto 0) <= STD_LOGIC_VECTOR(shift_right(SIGNED(Bluetooth_Data_L), (7-Volume_Shifts)));
        }
        Elsif(ISSP_source(5) = '1')
        {
            ISSP_probe(16 downto 0) <= STD_LOGIC_VECTOR(analog_dif);
        }
        Elsif(ISSP_source(6) = '1')
        {
            ISSP_probe(16 downto 0) <= STD_LOGIC_VECTOR(bluetooth_dif);
        }
        Elsif(ISSP_source(7) = '1')
        {
            ISSP_probe(0) <= Analog_On;
            ISSP_probe(1) <= Bluetooth_On;
            ISSP_probe(2) <= Bluetooth_Out;
        }
    }
    
--Bluetooth----------------------------------------------------------------------------------------
    
    SIGNAL Bluetooth_Data_L             : STD_LOGIC_VECTOR (16-1 downto 0) := (others => '0');
    SIGNAL Bluetooth_Data_R             : STD_LOGIC_VECTOR (16-1 downto 0) := (others => '0');

    NewComponent I2S_Interface_IN_Passive
    (
        Data_Width         => 16,
        BCLK_Edge          => '0',
        Delay_Edge         => '1',

        LRCLK              => Bluetooth_LRCLK,
        BCLK               => Bluetooth_BCLK,
        Data               => Bluetooth_Data,
        Data_L             => Bluetooth_Data_L,
        Data_R             => Bluetooth_Data_R,
    );

    
    SIGNAL ISSP_source : std_logic_vector (7 downto 0);
    SIGNAL ISSP_probe  : std_logic_vector (31 downto 0) := (others => 'X');
    NewComponent ISSP
    (
        source =>ISSP_source,
        probe  =>ISSP_probe,
    );

--Audio Out and Line In----------------------------------------------------------------------------

    SIGNAL Audio_Codec_Component_ADC_L : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_ADC_R : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_DAC_L : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_DAC_R : SIGNED  (15 downto 0);

    NewComponent MAX9867_Interface
    (
        Microphone_Ena   => false,   --Use microphone as ADC input
        Line_In_Ena      => true,    --Use line in as ADC input
        Differential_Out => false,    --false for audio jack
        
        Line_In_Gain => 0,
        ADC_Volume   => 0,
        DAC_Volume   => 0,
        
        Reset => '0',
        IRQ   => Audio_IRQ,
        SDA   => Audio_SDA,
        SCL   => Audio_SCL,
        MCLK  => Audio_MCLK,
        BCLK  => Audio_BCLK,
        LRCLK => Audio_LRCLK,
        SDOUT => Audio_SDOUT,
        SDIN  => Audio_SDIN,
        ADC_L => Audio_Codec_Component_ADC_L,
        ADC_R => Audio_Codec_Component_ADC_R,
        DAC_L => Audio_Codec_Component_DAC_L,
        DAC_R => Audio_Codec_Component_DAC_R,
    );
}
