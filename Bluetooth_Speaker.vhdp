Main
(

    Next        : IN     STD_LOGIC;  --Next Song
    Prev        : IN     STD_LOGIC;  --Last Song
    Pause       : In     STD_LOGIC;  --Play/Pause
    Next_LED    : IN     STD_LOGIC;  --Right LED
    Prev_LED    : IN     STD_LOGIC;  --Left LED
    Pause_LED   : In     STD_LOGIC;  --Middle LED
    
    Audio_MCLK  : OUT    STD_LOGIC;  --Master Clock
    Audio_IRQ   : IN     STD_LOGIC;  --Interrupt
    Audio_SDA   : INOUT  STD_LOGIC;  --I2C Data
    Audio_SCL   : INOUT  STD_LOGIC;  --I2C Clock
    Audio_BCLK  : IN     STD_LOGIC;  --I2S Bit Clock
    Audio_LRCLK : IN     STD_LOGIC;  --I2S Left/Right Clock
    Audio_SDOUT : IN     STD_LOGIC;  --I2S ADC Data
    Audio_SDIN  : OUT    STD_LOGIC;  --I2S DAC Data
    
    Bluetooth_LRCLK  : OUT STD_LOGIC := '0';
    Bluetooth_BCLK   : OUT STD_LOGIC := '0';
    Bluetooth_Data   : IN  STD_LOGIC := '0';
    Bluetooth_Next   : Out STD_LOGIC := '0';
    Bluetooth_Prev   : Out STD_LOGIC := '0';
    Bluetooth_Pause  : Out STD_LOGIC := '0';

)
{

--Buttons------------------------------------------------------------------------------------------

    Process ()
    {
        Thread
        {
            While(Next OR Prev OR Pause = '1')  { Wait(100ms); } --Wait until Button released
            While(Next AND Prev AND Pause = '0'){ Wait(100ms); } --Wait for Button pressed
            VARIABLE btn_reg : STD_LOGIC_VECTOR(2 downto 0);
            btn_reg(0) := Next;  --Save values in case the button isn't pressed any more
            btn_reg(1) := Prev;
            btn_reg(2) := Pause;
            --Simulate double click for bluetooth module (one click is vol up/down). Single click for Pause
            For(VARIABLE ctr : NATURAL range 0 to 2 := 0; ctr < 2 OR btn_reg(2) = '1'; ctr := ctr + 1)
            {
                Bluetooth_Next  <= btn_reg(0);
                Bluetooth_Prev  <= btn_reg(1);
                Bluetooth_Pause <= btn_reg(2);
                Wait(200ms);
                Bluetooth_Next <= '0';
                Bluetooth_Prev <= '0';
                Wait(200ms);
            }
        }
    }
    
--LEDs---------------------------------------------------------------------------------------------
    
    --When button pressed -> LED lights up and wave goes trough leds next to it
    SIGNAL LED_reg : STD_LOGIC_VECTOR(2 downto 0);
    Prev_LED  <= LED_reg(0);
    Pause_LED <= LED_reg(1);
    Next_LED  <= LED_reg(2);
    
    TYPE LED_Brightness_type IS ARRAY (0 to 2) OF STD_LOGIC_VECTOR(7 downto 0);
    SIGNAL LED_Brightness : LED_Brightness_type;
    
    Generate (for i in 0 to 2)
    {
        NewComponent PWM_Generator
        (
            Duty            => LED_Brightness(i),
            PWM_Out         => LED_reg(i),
        );
    }
    
--Channel Watcher----------------------------------------------------------------------------------
    
    SIGNAL Bluetooth_Out : STD_LOGIC := '1';
    Process ()
    {
        Thread
        {
            VARIABLE analog_min    : SIGNED (15 downto 0);
            VARIABLE analog_max    : SIGNED (15 downto 0);
            VARIABLE bluetooth_min : SIGNED (15 downto 0);
            VARIABLE bluetooth_max : SIGNED (15 downto 0);
        }
    }
    
--Volume-------------------------------------------------------------------------------------------
    
    SIGNAL Volume    : NATURAL range 0 to 4095 := 0;
    NewComponent ADC_MAX10_Single
    (
        Channel => 0,
        Data    => Volume,
    );
    
--Mixer--------------------------------------------------------------------------------------------
    
    Audio_Codec_Component_DAC_L <= Bluetooth_Data_L when Bluetooth_Out = '1' else Audio_Codec_Component_ADC_L;
    Audio_Codec_Component_DAC_R <= Bluetooth_Data_R when Bluetooth_Out = '1' else Audio_Codec_Component_ADC_R;
    
--Bluetooth----------------------------------------------------------------------------------------
    
    SIGNAL Bluetooth_Data_L             : STD_LOGIC_VECTOR (16-1 downto 0) := (others => '0');
    SIGNAL Bluetooth_Data_R             : STD_LOGIC_VECTOR (16-1 downto 0) := (others => '0');
    SIGNAL Bluetooth_Ready              : STD_LOGIC := '0';

    NewComponent I2S_Interface_IN
    (
        CLK_Frequency      => 12000000,
        Sampling_Frequency => 32000,
        Data_Width         => 16,
        Sample_Bits        => 16,
        BCLK_Edge          => '1',

        LRCLK              => Bluetooth_LRCLK,
        BCLK               => Bluetooth_BCLK,
        Data               => Bluetooth_Data,
        Data_L             => Bluetooth_Data_L,
        Data_R             => Bluetooth_Data_R,
        Ready              => Bluetooth_Ready,
    );
    
    ISSP_probe <= Bluetooth_Data_L & Audio_Codec_Component_ADC_L;
    Bluetooth_Out <= ISSP_source(0);
    
    SIGNAL ISSP_source : std_logic_vector (7 downto 0);
    SIGNAL ISSP_probe  : std_logic_vector (31 downto 0) := (others => 'X');
    NewComponent ISSP
    (
        source =>ISSP_source,
        probe  =>ISSP_probe,
    );

--Audio Out and Line In----------------------------------------------------------------------------

    SIGNAL Audio_Codec_Component_ADC_L : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_ADC_R : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_DAC_L : SIGNED  (15 downto 0);
    SIGNAL Audio_Codec_Component_DAC_R : SIGNED  (15 downto 0);

    NewComponent MAX9867_Interface
    (
        Microphone_Ena   => false,   --Use microphone as ADC input
        Line_In_Ena      => true,    --Use line in as ADC input
        Differential_Out => false,   --false for audio jack
        
        Line_In_Gain => 0,
        ADC_Volume   => 0,
        
        Reset => '0',
        IRQ   => Audio_IRQ,
        SDA   => Audio_SDA,
        SCL   => Audio_SCL,
        MCLK  => Audio_MCLK,
        BCLK  => Audio_BCLK,
        LRCLK => Audio_LRCLK,
        SDOUT => Audio_SDOUT,
        SDIN  => Audio_SDIN,
        ADC_L => Audio_Codec_Component_ADC_L,
        ADC_R => Audio_Codec_Component_ADC_R,
        DAC_L => Audio_Codec_Component_DAC_L,
        DAC_R => Audio_Codec_Component_DAC_R,
    );
}
